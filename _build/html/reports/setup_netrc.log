Traceback (most recent call last):
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\nbclient\client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\nbclient\client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\nbclient\client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "C:\Users\afriesz\AppData\Local\Continuum\miniconda3\envs\py_jb\lib\site-packages\nbclient\client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Determine if netrc file exists, and if it includes NASA Earthdata Login Credentials
try:
    netrcDir = os.path.expanduser(f"~/{nrc}")
    netrc(netrcDir).authenticators(urs)[0]
# If not, create a netrc file and prompt user for NASA Earthdata Login Username/Password
except FileNotFoundError:
    homeDir = os.path.expanduser("~")
    # Windows OS won't read the netrc unless this is set
    Popen(f'setx HOME {homeDir}', shell=True, stdout=DEVNULL);
    if nrc == '.netrc':
        Popen(f'touch {homeDir + os.sep}{nrc} | chmod og-rw {homeDir + os.sep}{nrc}', shell=True, stdout=DEVNULL, stderr=STDOUT);
    # Unable to use touch/chmod on Windows OS
    Popen(f'echo machine {urs} >> {homeDir + os.sep}{nrc}', shell=True)
    Popen(f'echo login {getpass(prompt=prompts[0])} >> {homeDir + os.sep}{nrc}', shell=True)
    Popen(f'echo password {getpass(prompt=prompts[1])} >> {homeDir + os.sep}{nrc}', shell=True)
    del homeDir
# Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login
except TypeError:
    homeDir = os.path.expanduser("~")
    Popen(f'echo machine {urs} >> {homeDir + os.sep}{nrc}', shell=True)
    Popen(f'echo login {getpass(prompt=prompts[0])} >> {homeDir + os.sep}{nrc}', shell=True)
    Popen(f'echo password {getpass(prompt=prompts[1])} >> {homeDir + os.sep}{nrc}', shell=True)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
[1;32m<ipython-input-4-4e99ac6b26a1>[0m in [0;36m<module>[1;34m()[0m
[0;32m      1[0m [1;31m# Determine if netrc file exists, and if it includes NASA Earthdata Login Credentials[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m
[0;32m      2[0m [1;32mtry[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m----> 3[1;33m     [0mnetrcDir[0m [1;33m=[0m [0mos[0m[1;33m.[0m[0mpath[0m[1;33m.[0m[0mexpanduser[0m[1;33m([0m[1;34mf"~/{nrc}"[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m      4[0m     [0mnetrc[0m[1;33m([0m[0mnetrcDir[0m[1;33m)[0m[1;33m.[0m[0mauthenticators[0m[1;33m([0m[0murs[0m[1;33m)[0m[1;33m[[0m[1;36m0[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0;32m      5[0m [1;31m# If not, create a netrc file and prompt user for NASA Earthdata Login Username/Password[0m[1;33m[0m[1;33m[0m[1;33m[0m[0m

[1;31mNameError[0m: name 'os' is not defined
NameError: name 'os' is not defined

